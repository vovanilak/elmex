from aiogram import Router, F
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.filters import CommandStart, Command
from data.info import get_role
from keyboards import builder, inline
from data import book
from aiogram.enums.parse_mode import ParseMode
from middlewares.messages import DbLogMiddleware
from data.db import stat
from aiogram.types.reply_keyboard_remove import ReplyKeyboardRemove


router = Router()
router.message.middleware(DbLogMiddleware())


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µüëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚¨á',
                         reply_markup=builder.reply_builder(
                             book.layers['menu']))

@router.callback_query(F.data == '–ú–µ–Ω—é')
async def btn_start(call: CallbackQuery):
    await call.answer()
    await call.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚¨á',
                         reply_markup=builder.reply_builder(
                             book.layers['menu']))


@router.message(Command('secretinfo'))
async def cmd_getadminfo(message: Message):
    result = stat('./data/messages.db')
    await message.answer(str(result))
    '''await message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n'
                         f'–í—Å–µ–≥–æ: {result[0]}\n'
                         f'–°–µ–≥–æ–¥–Ω—è: {result[2]}\n'
                         f'–ù–µ–¥–µ–ª—è: {result[4]}\n\n'
                         f'<b>–°–æ–æ–±—â–µ–Ω–∏—è</b>\n'
                         f'–°–µ–≥–æ–¥–Ω—è: {result[1]}\n')'''


@router.message(F.text.in_(book.layers['menu']))
async def menu(message: Message):
    txt = message.text
    lst = book.layers['menu']
    if txt == lst[0]:
        await message.answer(text='–ù–∞—à –∫–∞–Ω–∞–ªüì£',
                             reply_markup=inline.create_inline(
                                 text='–ü–µ—Ä–µ–π—Ç–∏‚Üó', url=book.menu[txt]))
    elif txt == lst[1]:
        await message.answer(text='–ß–∞—Ç —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–πüì≤',
                             reply_markup=inline.create_inline(
                                 text='–ü–µ—Ä–µ–π—Ç–∏‚Üó', url=book.menu[txt]))
    elif txt == lst[2]:
        await message.answer(
            text=
            "–ö–æ–º–ø–∞–Ω–∏—è <i>elmex</i> —è–≤–ª—è–µ—Ç—Å—è –≤–µ–¥—É—â–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–º –∫–ª–µ–º–º–Ω—ã—Ö –∫–æ–ª–æ–¥–æ–∫ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤ –ò–Ω–¥–∏–∏.\n\n–ù–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∞–ª–∞—Å—å –≤ 1963 –≥–æ–¥—É, –∫–æ–≥–¥–∞ –º—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∫–ª–µ–º–º–Ω—ã—Ö –∫–æ–ª–æ–¥–æ–∫ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.–° —Ç–µ—Ö –ø–æ—Ä –º—ã —Å–º–æ–≥–ª–∏ –¥–æ—Å—Ç–∏—á—å —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –∏ —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–æ—Å—Ç–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è –∏–Ω–Ω–æ–≤–∞—Ü–∏—è–º, –∫–∞—á–µ—Å—Ç–≤—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –ø–æ–≤—ã—à–µ–Ω–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.\n\n–ú—ã —Ç–∞–∫–∂–µ –≥–æ—Ä–¥–∏–º—Å—è —Å–≤–æ–µ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏—è –Ω–∞ —Å–≤–æ—é –ø—Ä–æ–¥—É–∫—Ü–∏—é.\n\n–ö–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏, –∫–∞–∫ ABB, Alstom, Schneider Electric, Siemens, Honeywell, GE, L&T, BHEL –∏ NTPC, –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥—É.\n\n–ß—Ç–æ–±—ã —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π —Ä—ã–Ω–æ–∫, –≤ 1993 –≥–æ–¥—É –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è <i>Elmex Electric Pvt. Ltd.</i>, –∫–æ—Ç–æ—Ä–∞—è –≤–ø–µ—Ä–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, –º–æ–Ω—Ç–∏—Ä—É–µ–º—ã—Ö –Ω–∞ DIN-—Ä–µ–π–∫—É.\n\n#–±–æ—Ç_–æ_–∫–æ–º–ø–∞–Ω–∏–∏",
            parse_mode=ParseMode.HTML)

    elif txt == lst[3]:
        for mes in book.menu[txt]:
            await message.answer(text=mes, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

    elif txt == lst[4]:
        await message.answer(
            text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä‚¨áÔ∏è',
            reply_markup=builder.reply_builder(book.layers['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] +
                                               ['–ú–µ–Ω—é']))

    elif txt == lst[5]:
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª', reply_markup=ReplyKeyboardRemove())
        
@router.message(F.text.isdigit())
async def inf(message: Message):
    iou = get_role(int(message.text))
    await message.answer(iou, parse_mode=ParseMode.HTML)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã—Ö–æ–¥–∞', reply_markup=builder.inline(["–ú–µ–Ω—é"]))

@router.message(F.text.in_(book.nomen.keys()))
async def select_product(message: Message):
    txt = message.text
    thing = book.nomen[txt]
    if txt in book.nomen.keys():
        file = FSInputFile(f'data/{thing["photo"][0]}.PNG')
        if thing['url']:
            await message.answer_photo(photo=file,
                                       caption=thing['–û–ø–∏—Å–∞–Ω–∏–µ'],
                                       reply_markup=inline.create_inline(
                                           text='–°–∫–∞—á–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥üì•',
                                           url=thing['url']))
        else:
            await message.answer_photo(photo=file, caption=thing['–û–ø–∏—Å–∞–Ω–∏–µ'])


@router.message(F.text.in_(list(book.layers.keys())[2:]))
async def send_layer2(message: Message):
    await message.answer(
        text='–ö–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ?',
        reply_markup=builder.reply_builder(book.layers[message.text] +
                                           ['–ù–∞–∑–∞–¥']))


@router.message(F.text.in_(['–ù–∞–∑–∞–¥', '–ú–µ–Ω—é']))
async def back(message: Message):
    if message.text == '–ù–∞–∑–∞–¥':
        await message.answer(
            text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä‚¨áÔ∏è',
            reply_markup=builder.reply_builder(book.layers['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] +
                                               ['–ú–µ–Ω—é']))
    else:
        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚¨á',
                             reply_markup=builder.reply_builder(
                                 book.layers['menu']))


@router.message()
async def main_error(message: Message):
    await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...üò¨\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è /start')



